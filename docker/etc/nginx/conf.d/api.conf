server {
  listen 80;
  root /var/app/current/src/public;
  index index.php index.html index.htm;

  # No logs, to avoid filling the instance disk
  log_not_found off;
  access_log off;

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  location ~ /\. {
    deny all;
  }

  # php-fpm ping URL
  location /api/ping {
    include fastcgi.conf;
    fastcgi_pass phpfpm_backend;
  }


  location /sso {
    alias /var/app/current/src/vendor/simplesamlphp/simplesamlphp/www;


    ## Check for file existing and if there, stop ##
    if (-f $request_filename) {
      break;
    }

    ## Check for file existing and if there, stop ##
    if (-d $request_filename) {
      break;
    }

    location ~ ^(?<prefix>/sso)(?<phpfile>.+?\.php)(?<pathinfo>/.*)?$ {
      include fastcgi.conf;
      fastcgi_pass phpfpm_backend;
      fastcgi_split_path_info ^(.+?\.php)(/.+)$;
      fastcgi_param PATH_INFO $pathinfo if_not_empty;
      fastcgi_param SCRIPT_FILENAME $document_root$phpfile;
      fastcgi_index index.php;
      include fastcgi_params;
    }
  }

  # Example of "mod_rewrite" for use with a framework or wordpress or others.
  location / {
    try_files $uri $uri/ /index.php?$args;
  }

  # Tell browser to cache image files for 24 hours, do not log missing images
  # I typically keep this after the yii rules, so that there is no conflict with content served by Yii
  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    try_files $uri $uri/ /index.php?$args;
    expires 24h;
  }

  # Block for processing PHP files
  # Specifically matches URIs ending in .php
  location ~ \.php$ {
    #Only set CORS to true of a request comes from the whitelisted urls
    if ($http_origin ~* "(https?:\/\/(library\.stage\.drupal\.uq\.edu\.au)|((test|app|assets|www|dev-app|dev-fbs|app-testing|guides|answers|ezproxy|web|search)\.library\.uq\.edu\.au(?::[0-9]{2,4})?$))" ) {
        set $cors "true";
    }

    # OPTIONS indicates a CORS pre-flight request
    if ($request_method = 'OPTIONS') {
      set $cors "${cors}options";
    }

    # non-OPTIONS indicates a normal CORS request
    if ($request_method = 'GET') {
      set $cors "${cors}get";
    }
    if ($request_method = 'POST') {
      set $cors "${cors}post";
    }
    if ($request_method = 'DELETE') {
      set $cors "${cors}delete";
    }
    if ($request_method = 'PUT') {
      set $cors "${cors}put";
    }

    # if it's a GET or POST, set the standard CORS responses header
    if ($cors = "trueget") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With, X-UQL-Token';
    }
    if ($cors = "truepost") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With, X-UQL-Token';
    }
    if ($cors = "truedelete") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With, X-UQL-Token';
    }
    if ($cors = "trueput") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With, X-UQL-Token';
    }
    # if it's OPTIONS, then it's a CORS preflight request so respond immediately with no response body
    if ($cors = "trueoptions") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With, X-UQL-Token';
      add_header 'Content-Length' 0;
      add_header 'Content-Type' 'text/plain charset=UTF-8';

      return 204;
    }

    try_files $uri =404;

    include fastcgi.conf;
    fastcgi_pass phpfpm_backend;
    fastcgi_param PHP_VALUE "newrelic.license=NEWRELIC_LICENSE\nnewrelic.appname=uqlais";
  }
}
